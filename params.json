{"body":"### ALE - Another Looping Event - (Alpha)\r\n\r\nCreated by Ben Lesh\r\n\r\nLicensed under GNU General Public License v 3\r\n\r\n===\r\n\r\nThis project is a Node.js style implementation of an event loop architecture in C#. This is something I whipped up for fun, mostly as a proof of concept. I like it though, and I'm looking for feedback.\r\n\r\nThank you for any feedback you might have.\r\n\r\n*examples*\r\n\r\n### To start a web server\r\n\r\n    EventLoop.Start(() => {\r\n        Server.Create()\r\n\t\t   .Use((req, res) => {\r\n              res.Write(\"<h1>Hello World</h1>\");\r\n           }).Listen(\"http://*:1337\");\r\n    });\r\n    \r\n### Setting up a web socket server\r\n\r\n    EventLoop.Start(() => {\r\n        Net.CreateServer((socket) => {\r\n            socket.Receive((text) => {\r\n                socket.Send(\"Echo: \" + text);\r\n            });\r\n        }).Listen(\"127.0.0.1\", 1338, \"http://origin.com\");\r\n    });\r\n    \r\nOr just to do something like read a file from disk:\r\n\r\n    EventLoop.Start(() => {\r\n        File.ReadAllText(@\"C:\\File.txt\", (text) => {\r\n            DoSomething(text);\r\n        });\r\n    });\r\n\t\r\n### To start a ALE in IIS\r\n\r\n* Start a new web project.\r\n* Reference ALE and ALE.Web.\r\n* Add a reference to the HttpHandler in the Web.Config (here is the minimum Web.config required):\r\n\r\n        <?xml version=\"1.0\"?>\r\n        <configuration>\r\n          <system.web>\r\n            <compilation debug=\"true\" targetFramework=\"4.0\" />\r\n         </system.web>\r\n         <system.webServer>\r\n       \t <validation validateIntegratedModeConfiguration=\"false\"/>\r\n         \t<modules runAllManagedModulesForAllRequests=\"true\"/>\r\n         \t<handlers>\r\n         \t  <add verb=\"*\" path=\"*\"\r\n         \t\tname=\"AleHttpHandler\"\r\n         \t\ttype=\"ALE.Web.AleHttpHandler\"/>\r\n         \t</handlers>\r\n           </system.webServer>\r\n         </configuration>\r\n\t \r\n\t \r\n\r\n* Add initialization code to Application_Start in your Global.asax:\r\n\r\n    void Application_Start(object sender, EventArgs e)\r\n    {\r\n        // Start the event loop.\r\n        EventLoop.Start();\r\n\r\n        // Get the ALE server instance and wire up your middlware.\r\n        ALE.Web.Server.Create()\r\n            .Use((req, res) => res.Write(\"Hello World\"))\r\n            .Use((req, res) => res.Write(\"<br/>No seriously, I said hello.\"));\r\n    }\r\n\r\n* Add teardown in Application_End in your Global.asax:\r\n\r\n    void Application_End(object sender, EventArgs e)\r\n    {\r\n        // Shut down the EventLoop.\r\n        EventLoop.Stop();\r\n    }\r\n\r\n\r\n\r\nSee my blog at http://www.benlesh.com for more information (posts tagged with ALE)\r\n\r\n### Version History\r\n * v 0.0.10.2 - Added basic Promise implementation\r\n * v 0.0.9.4 - Updated EventLoops to be slightly more efficient.\r\n   * added unit tests.\r\n   * Fixed issues with Razor templating.\r\n   * Fixed some issues with routing.\r\n * v 0.0.7.2 - Added FileSystemWatcher implemention.\r\n   * added beginnings of Razor template view processor.\r\n * v 0.0.7.0 - Added routing.\r\n * v 0.0.6.1 - Rewrote EventLoop to use Tasks and ContinueWith rather than Actions for performance reasons, and cleaned up the api a little.\r\n   * moved File class to proper namespace.\r\n   * updated File async methods.\r\n   * added File.Read method for streaming file data.\r\n * v 0.0.5.0 - Added asynchronous http handler for IIS integration.\r\n * v 0.0.4.6 - Added a static file server implementation.\r\n * v 0.0.4.4 - Updated web server to use a single event to register all actions\r\n    * removed preprocessor and post processor events.\r\n\t* Create method no longer used to register a main event. There is no main event.\r\n * v 0.0.4.2 - Converted middleware usage to simple event/delegate implementation.\r\n * v 0.0.4.1 - Abstractions and Middleware capabilities added. Laying the groundwork for a routed server.\r\n    * Abstracted out Server, Request and Response.\r\n\t* Added IPreprocessor and IPostprocessor for \"before and after\" middleware implementations.\r\n\t* Added Using method and overloards to IServer to handle attaching middleware.\r\n * v 0.0.3.0 - Added non-blocking WebSocket implementation\r\n * v 0.0.2.2 - Fixed a few issues\r\n    * Fixed an issue where EventLoop wouldn't pause when Events Queue was empty.\r\n\t* Added Do.Async functionality.\r\n\t* Tested multithreaded event-loop processing.\r\n * v 0.0.2.1 - Updated Sql client Reader call to .NET's non-blocking async call.\r\n * v 0.0.2.0 - Updated all I/O called to .NET's non-blocking async calls.\r\n * v 0.0.1.0 - Added a simple SqlClient implementation, ExecuteReader only for now. More soon.","name":"ALE","google":"UA-36380079-1","tagline":"Another Looping Event - An Event Loop Architecture for C#","note":"Don't delete this file! It's used internally to help with page regeneration."}